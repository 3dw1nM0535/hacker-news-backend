const { makeExecutableSchema } = require('graphql-tools');
const resolvers = require('./resolvers');

/**
 * Define Schema types
 */

 const typeDefs = `
  type Link {
    id: ID!
    url: String!
    description: String!
    postedBy: User
  }

  type User {
    id: ID!
    name: String!
    email: String!
  }

  type Query {
    allLinks: [Link!]!
  }

  type Mutation {
    createLink (url: String!, description: String!) : Link 

    # Note that this mutation could receive the email and password directly
    # as arguments, with no problem. You're just using this "authProvider"
    # instead to mimic the signature generated by Graphcool, which will
    # make it easier to integrate this server implementation later with the 
    # code from the frontend tutorials.

    createUser (name: String!, authProvider: AuthProviderSignUpData! ) : User

    signinUser (email: AUTH_PROVIDER_EMAIL) : SigninPayload
  }

  type SigninPayload {
    token: String!
    user: User
  }

  input AuthProviderSignUpData {
    email: AUTH_PROVIDER_EMAIL
  }

  input AUTH_PROVIDER_EMAIL {
    email: String!
    password: String!
  }
 
  `;

  //Generate executable Scheme from you typeDef
  module.exports = makeExecutableSchema({ typeDefs, resolvers });